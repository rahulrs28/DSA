class Profit { 
	
	static int maxProfit(int price[], int n) 
	{ 
		int profit[] = new int[n]; 
		for (int i = 0; i < n; i++) 
			profit[i] = 0; 

		int max_price = price[n - 1]; 
		//calculate max profit in one transaction 
		for (int i = n - 2; i >= 0; i--) 
		{ 
              max_price=Math.max(max_price,price[i]); 
		    int  cur_max_profit = max_price-price[i];
			profit[i] = Math.max(profit[i + 1],cur_max_profit); 
		}  
          
        //calculate max profit in second transaction
		int min_price = price[0]; 
		for (int i = 1; i < n; i++) 
		{    min_price = Math.min(min_price,price[i]);
		 int cur_max_prof = price[i]-min_price;
			profit[i] = Math.max(profit[i - 1],profit[i] + (cur_max_prof)); 
		} 
		int result = profit[n - 1]; 
	
		return result; 
	} 

	// Driver Code 
	public static void main(String args[]) 
	{ 
		int price[] = { 2, 30, 15, 10, 8, 25, 80 }; 
		int n = price.length; 
		System.out.println("Maximum Profit = "
						+ maxProfit(price, n)); 
	} 

} /* This code is contributed by Rajat Mishra */
